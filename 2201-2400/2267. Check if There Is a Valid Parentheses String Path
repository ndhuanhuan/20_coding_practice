class Solution {
public:
    bool hasValidPath(vector<vector<char>>& grid) {
        const int m = grid.size();
        const int n = grid[0].size();
        
        queue<tuple<int, int, int>> q;
        
        vector<vector<vector<bool>>> visited(m, vector<vector<bool>>(n, vector<bool>(200)));
        
        if(grid[0][0] == ')') return false;
        
        visited[0][0][1] = 1;
        q.push({0, 0 ,1});
        
        while(!q.empty()) {
            // auto cur = q.front();
            // int x = cur[0];
            // int y = cur[1];
            // int w = cur[2];
            auto [x, y, w] = q.front();
            q.pop();
            
            if(x == m-1 && y == n-1 && !w) return true;
            
            if(x + 1 < m) {
                if(grid[x+1][y] == '(') {
                    if(!visited[x+1][y][w+1]) {
                        visited[x+1][y][w+1] = true;
                        q.push({x+1, y, w+1});
                    }
                } else {
                    if(w && !visited[x+1][y][w-1]) {
                        visited[x+1][y][w-1] = true;
                        if(w-1 >= 0) {
                            q.push({x+1, y, w-1});
                        } 
                        
                    }
                }
            }
            
            
            if(y + 1 < n) {
                if(grid[x][y+1] == '(') {
                    if(!visited[x][y+1][w+1]) {
                        visited[x][y+1][w+1] = true;
                        q.push({x, y+1, w+1});
                    }
                } else {
                    if(w && !visited[x][y+1][w-1]) {
                        visited[x][y+1][w-1] = true;
                        if(w-1 >= 0) {
                            q.push({x, y+1, w-1});
                        }
                    }
                }
            }
            
         }
         
        
        return false;
        
    }
};
