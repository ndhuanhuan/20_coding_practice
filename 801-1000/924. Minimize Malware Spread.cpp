// https://leetcode.com/problems/minimize-malware-spread/discuss/181129/Python-Union-Found
// 现在有一个网络，由邻接矩阵可知其连通性。在网络中，有几个节点被感染，并且会感染与其相连的所有节点。现在从已知的，
// 最初被感染的节点中去除一个，使网络中被感染的节点达到最小，则应该去除哪个节点。
// 在做题之前，我们可以先考虑图的组成。对于连通图，也就是一个树，如果存在两个及两个以上的初始感染节点，
// 那么只有将被感染的节点全部去除，才能使这颗树不被感染，否则，这颗树的节点将全部感染。由此，
// 可推的非连通图的情况：如果一个连通量中，存在多个被感染的初始节点，那么无论去除哪个初始感染节点，这个连通量都将被感染。
// 所以，要找寻图中的仅有一个初始感染点且连通量所包含的节点数尽可能大。

class Solution {
public:
    vector<int> parents;
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        for (int i = 0; i < n; ++i) parents.push_back(i);
        for (int i = 0; i < n; ++i)
            for (int j = i + 1; j < n; ++j)
                if (graph[i][j]) uni(i, j);
        vector<int> area(n, 0), malware(n, 0);
        for (int i = 0; i < n; ++i) area[find(i)]++;
        for (int i : initial) malware[find(i)]++;
        vector<int> res = {1, 0};
        for (int i : initial)
            res = min(res, {(malware[find(i)] == 1 ) * (-area[find(i)]), i});
        return res[1];
    }

    int find(int x) {
        if (x != parents[x])
            parents[x] = find(parents[x]);
        return parents[x];
    }
    void uni(int x, int y) {
        parents[find(x)] = find(y);
    }
};
