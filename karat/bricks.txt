/*
You are working for a construction firm, and need to check if a wall made of different size bricks can be split without cutting through any of the bricks.

For the example, this wall can be split on position 7 and at position 9:

      0   1   2   3   4   5   6   7   8   9   10  11  12  13
                                  |       |
                                  V       V
      +---+---+---+---+---+---+---+---+---+---+---+---+---+
      |             7             | 1 | 1 |       4       |
      +---+---+---+---+---+---+---+---+---+---+---+---+---+
      |         5         | 1 | 1 |   2   |   2   |   2   |
      +---+---+---+---+---+---+---+---+---+---+---+---+---+
      |     3     |       4       | 1 | 1 |     3     | 1 |
      +---+---+---+---+---+---+---+---+---+---+---+---+---+
      | 1 | 1 | 1 | 1 |     3     |   2   | 1 |     3     |
      +---+---+---+---+---+---+---+---+---+---+---+---+---+

Here is the sample input for the wall depicted above:

brick_wall_1 = [
  [7,1,1,4],
  [5,1,1,2,2,2],
  [3,4,1,1,3,1],
  [1,1,1,1,3,2,1,3]
]

Write a function that takes this data as input and returns all the positions where a wall can be split.

get_split_positions(brick_wall_1) => [ 7, 9 ]

And here are other examples:

brick_wall_2 = [         
  [2,2,2,1],
  [3,4]                  
]

brick_wall_3 = [
  [9,1],                   
  [5,4,1],                 

  [3,3,2,1,1],               
  [6,3,1],                   
]

brick_wall_4 = [
  [1,1,1,1,1,1,1,1],
  [1,1,1,1,1,1,1,1],
  [1,1,1,1,1,1,1,1]
]

brick_wall_5 = [
  [1,5,1]    1,6,7
]

brick_wall_6 = [
  [3],
  [3]
]

get_split_positions(brick_wall_1) => [7,9]
get_split_positions(brick_wall_2) => []
get_split_positions(brick_wall_3) => [9]
get_split_positions(brick_wall_4) => [1,2,3,4,5,6,7]
get_split_positions(brick_wall_5) => [1,6]
get_split_positions(brick_wall_6) => []

Complexity analysis variables:

n: number of bricks in the wall
w: wall width
h: wall height (in layers)

*/

import java.io.*;
import java.util.*;

public class BrickWall1 {
    public static void main(String[] argv) {



        int[][] brick_wall_1 = {
                {7, 1, 1, 4},
                {5, 1, 1, 2, 2, 2},
                {3, 4, 1, 1, 3, 1},
                {1, 1, 1, 1, 3, 2, 1, 3}
        };

        int[][] brick_wall_2 = {
                {2, 2, 2, 1},
                {4, 3},
                {3, 4}
        };

        int[][] brick_wall_3 = {
                {9, 1},
                {5, 4, 1},
                {3, 3, 2, 1, 1},
                {6, 3, 1}
        };

        int[][] brick_wall_4 = {
                {1, 1, 1, 1, 1, 1, 1, 1},
                {1, 1, 1, 1, 1, 1, 1, 1},
                {1, 1, 1, 1, 1, 1, 1, 1}
        };

        int[][] brick_wall_5 = {
                {1, 5, 1}
        };

        int[][] brick_wall_6 = {
                {3},
                {3}
        };
		
		System.out.println(get_split_positions(brick_wall_1));
        System.out.println(get_split_positions(brick_wall_2));
        System.out.println(get_split_positions(brick_wall_3));
        System.out.println(get_split_positions(brick_wall_4));
        System.out.println(get_split_positions(brick_wall_5));
        System.out.println(get_split_positions(brick_wall_6));
		
 }











/*
Given a wall and a position, write a function to return how many neighbors the brick at that position has.
The position within the wall is given from the top-left and may fall anywhere within a brick (not necessarily at the start).
For example, in the wall below:
- the brick at (0, 2) has four neighbors.
- the brick at (2, 6) has seven neighbors.
- the brick at (4, 2) has six neighbors.
- the brick at (5, 6) has three neighbors.
- the brick at (5, 7) has two neighbors.
      +---+---+---+---+---+---+---+---+---+
      | • (7) | 1 | 1 |
      +---+---+---+---+---+---+---+---+---+
      | 5 | 1 | 1 | 2 |
      +---+---+---+---+---+---+---+---+---+
      | 3 | (4)• | 1 | 1 |
      +---+---+---+---+---+---+---+---+---+
      | 1 | 1 | 1 | 1 | 3 | 2 |
      +---+---+---+---+---+---+---+---+---+
      | 1 | (2)• | 1 | 3 | 2 |
      +---+---+---+---+---+---+---+---+---+
      | 1 | 1 | 1 | 1 | (3) • | •(2) |
      +---+---+---+---+---+---+---+---+---+
brick_wall_7 = [
  [7,1,1],
  [5,1,1,2],
  [3,4,1,1],
  [1,1,1,1,3,2],
  [1,2,1,3,2],
  [1,1,1,1,3,2]
]
brick_wall_8 = [
  [1,1,1,1,1,1,1,1],
  [1,1,1,1,1,1,1,1],
  [1,1,1,1,1,1,1,1]
]
brick_wall_9 = [
  [1,5,1]
]
brick_wall_10 = [
  [3],
  [3]
]
analyze_brick(brick_wall_7, 0, 2) => 4
analyze_brick(brick_wall_7, 2, 6) => 7
analyze_brick(brick_wall_7, 4, 2) => 6
analyze_brick(brick_wall_7, 5, 6) => 3
analyze_brick(brick_wall_7, 5, 7) => 2
Additional test cases using some of the walls from the previous question:
analyze_brick(brick_wall_8, 1, 1) => 4
analyze_brick(brick_wall_9, 0, 4) => 2
analyze_brick(brick_wall_10, 0, 2)=> 1
Complexity analysis variables:
n: number of bricks in the wall
w: wall width
h: wall height (in layers)
*/
import java.util.*;
public class BrickWall2 {
    public static void main(String[] argv) {

        int[][] brick_wall_7 = {
                {7, 1, 1},
                {5, 1, 1, 2},
                {3, 4, 1, 1},
                {1, 1, 1, 1, 3, 2},
                {1, 2, 1, 3, 2},
                {1, 1, 1, 1, 3, 2}
        };
        int[][] brick_wall_8 = {
                {1, 1, 1, 1, 1, 1, 1, 1},
                {1, 1, 1, 1, 1, 1, 1, 1},
                {1, 1, 1, 1, 1, 1, 1, 1}
        };
        int[][] brick_wall_9 = {
                {1, 5, 1}
        };
        int[][] brick_wall_10 = {
                {3},
                {3}
        };

        System.out.println(analyze_brick(brick_wall_7, 0, 2));
        System.out.println(analyze_brick(brick_wall_7, 2, 6));
        System.out.println(analyze_brick(brick_wall_7, 4, 2));
        System.out.println(analyze_brick(brick_wall_7, 5, 6));
        System.out.println(analyze_brick(brick_wall_7, 5, 7));

        System.out.println(analyze_brick(brick_wall_8, 1, 1));
        System.out.println(analyze_brick(brick_wall_9, 0, 4));
        System.out.println(analyze_brick(brick_wall_10, 0, 2));

    }
